#!/usr/bin/env bash

export GOPATH="${HOME}/gocode"
export PATH="${GOPATH}/bin":$PATH

SUCCESS_CODE=0
ERROR_CODE=1
bitmarkd_cluster_numbers=("1" "2" "3" "4" "5" "6")
bitmarkd_connected=false

measure_time() {
    s=$(date +%s)
    "$@"
    # rc=$?
    printf "finish execution '%s' for %s seconds\n" "$@" $(($(date +%s) - s))
}

check_script_result() {
    if [ $# -ne 1 ]; then
        printf "error argument, expect 1 but get $#"
        exit $ERROR_CODE
    fi

    if [ $? -ne $SUCCESS_CODE ]; then
        printf "execute $1 fail, abort..."
        clean_up
        exit $ERROR_CODE
    fi
}

clean_up_programs=(
    "bitmarkd"
    "recorderd"
    "bitcoind"
    "litecoind"
)

clean_up() {
    for program in "${clean_up_programs[@]}"
    do
        pkill -f "${program}"
    done
    exit $ERROR_CODE
}

trap "clean_up" SIGINT SIGTERM

# run crypto programs
run_crypto() {
    run-crypto
    check_script_result "run-crypto"
}

check_crypto() {
    processes=("bitcoind" "litecoind")
    for process in "${processes[@]}"
    do
        if ! pgrep "$process" &> /dev/null; then
            printf "\n%s is not started, abort...\n" "$process"
            clean_up
            exit $ERROR_CODE
        fi
    done
}

# setup bitmarkd if bitmarkd config not exist
setup_bitmarkd () {
    setup-bitmarkd
    check_script_result "setup-bitmarkd"
}

run_bitmarkd() {
    for number in "${bitmarkd_cluster_numbers[@]}"
    do
        printf "\nStart bitmarkd %s\n" "${number}"
        cd "${HOME}/.config/bitmarkd${number}" || true
        nohup bitmarkd --config-file="bitmarkd${number}.conf" start >/dev/null 2>&1 &

        sleep 5
    done
}

stop_recorderd() {
    # stop existing running recorderd
    for pid in $(pgrep -f recorderd.conf)
    do
        printf "stop recorderd process %s...\n" "${pid}"
        pkill pid
        sleep 1
    done
}

recorderd_dir="${HOME}/.config/recorderd"
recorderd_file="recorderd.conf"
run_recorderd() {
    printf "\nStart recorderd...\n"

    while ! pgrep -f "recorderd.conf" > /dev/null
    do
        cd "${recorderd_dir}"
        printf "starting recorderd...\n"
        nohup recorderd --config-file="${recorderd_file}" >/dev/null 2>&1 &
        sleep 1
    done

    printf "recorderd is running\n"
    cd - 1 > /dev/null
}

local=127.0.0.1
check_bitmarkd() {
    for number in "${bitmarkd_cluster_numbers[@]}"
    do
        normal_mode=$(curl -s -k "https://${local}:2${number}31/bitmarkd/details" | jq | grep -c Normal)
        if [ "$normal_mode" != "$SUCCESS_CODE" ]; then
            printf "\nnode %s in Normal mode, cli port %s, https port %s\n" "${number}" "2${number}30" "2${number}31"
            printf 'run-regression finished' | terminal-notifier
            bitmarkd_connected=true
            break 1                 # break 1 levels of loop
        fi
    done
}

run_crypto
check_crypto

setup_bitmarkd
measure_time run_bitmarkd

stop_recorderd
run_recorderd

check_bitmarkd

if [ "$bitmarkd_connected" = "false" ]; then
    printf "bitmarkd cannot connected\n"
    exit $ERROR_CODE
fi

exit $SUCCESS_CODE
