#!/usr/bin/env bash

export GOPATH="${HOME}/gocode"
export PATH="${GOPATH}/bin":$PATH

ERROR_CODE=1

# run crypto
run-crypto

if [ "$1" != "bm_only" ]; then
    # setup bitmarkd if bitmarkd config not exist
    setup-bitmarkd
    if [ $? -ne 0 ]; then
        printf "\nsetup bitmarkd fail...abort\n"
        exit $ERROR_CODE
    fi
fi

# run bitmarkd
array=("1" "2" "3" "4" "5")
for number in "${array[@]}"
do
    printf "\nStart bitmarkd ${number}"
    cd "${HOME}/.config/bitmarkd${number}"
    nohup bitmarkd --config-file="bitmarkd${number}.conf" start >/dev/null 2>&1 &

    # wait for bitmarkd to initialize tcp, only for 3, 4
    if [ "$number" != "1" ] && [ "$number" != "5" ]; then
        sleep 100
    fi
done

# stop existing running recorderd
for pid in $(pgrep recorderd)
do
    printf "\nStop recorderd process ${pid}...\n"
    pkill pid
done

# run recorderd
printf "\nRun recorderd..."

recorderd_dir="${HOME}/.config/recorderd"
recorderd_file="recorderd.conf"

while true;
do
    if pgrep recorderd; then
        break
    fi

    cd "${recorderd_dir}"
    echo starting recorderd...
    nohup recorderd --config-file="${recorderd_file}" >/dev/null 2>&1 &

    # wait 5 seconds to check
    printf "\nChecking recroderd runing status..."
    sleep 10
done
printf "recorderd start success\n"
cd - 1

start_time=""
end_time=""
# calculate time
calculate_time() {
    if [ -z $start_time ]; then
        start_time=$(date +%s)
    elif [ -z $end_time ]; then
        end_time=$(date +%s)
    else
        printf "\nIt takes $(( $end_time - $start_time )) seconds bitmarkd connect\6n"
    fi
}

# check connection, at leat 3 servers should be connected
local=127.0.0.1
calculate_time
while true
do
    array=("1" "2" "3" "4" "5")
    for number in "${array[@]}"
    do
        normal_mode=$(curl -s -k "https://${local}:2${number}31/bitmarkd/details" | jq | grep -c Normal)
        if [ $normal_mode -ne 0 ]; then
            printf "\nnode ${number} in Normal mode, cli port 2${number}30, https port 2${number}31\n"
            calculate_time
            printf 'run-regression finished' | terminal-notifier
            break 2                 # break 2 levels of loop
        fi
    done
    printf "waiting nodes to sync...\n"
    sleep 5
done
calculate_time
