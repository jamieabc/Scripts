#!/usr/bin/env node

const request = require('request');
const fs = require('fs');
const path = require('path');

const myPHID = 'PHID-USER-xn5svyu3pkznrbw6sq6g';

class Conduit {
  constructor(opts, cb) {
    this.client = 'Conduit';
    this.url = opts.url;
    this.user = opts.user;
    this.token = opts.token;
    this.configFile  = opts.configFile;

    if (!this.url || !this.configFile || !this.token) {
      this.configFile = path.join(process.env.HOME, '.arcrc');
      this.parseConfig((err) => {
        if (err) {
          console.log(err);
          return;
        }
        cb(null, this);
      });
    } else {
      cb(null, this);
    }
  }

  exec(route, params, cb) {
    if (!this.url || !this.token) {
      console.log('this.url: ', this.url);
      console.log('this.token: ', this.token);
      console.log('error: please check input');
      return;
    }

    params.__conduit__ = { token: this.token };

    request.post(this.url + route, {
      json: true,
      form: {
        output: 'json',
        params: JSON.stringify(params)
      }
    }, (err, response, data) => {
      if (response.statusCode >= 400) {
        console.log('error response: ', response);
      }

      cb(data.result);
    });
  }

  parseConfig(cb) {
    fs.readFile(this.configFile, 'utf8', (err, data) => {
      if (err) {
        console.log('error: ', err);
        return;
      }

      const arcConfig = JSON.parse(data);
      this.url = Object.keys(arcConfig.hosts)[0];
      this.token = arcConfig.hosts[this.url].token;
      cb(null, this);
    });
  }
};

conduit = new Conduit({}, (err, conduit) => {
  conduit.exec('differential.revision.search', {
    queryKey: 'active',
    constraints: {
      reviewerPHIDs: [myPHID]
    },
    order: 'updated',
    attachments: {
      'subscribers': true
    }
  }, (data) => {
    if (!data) {
      console.log('error ont data, abort!');
      return;
    }
    data.data.forEach(review => {
      console.log(review.id + ':\t' + review.fields.title + '\t\t');
    });
  });
});
