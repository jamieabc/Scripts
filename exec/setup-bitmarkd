#!/usr/bin/env bash
set -e

ERROR_CODE=1
SUCCESS_CODE=0

# stop existing running bitmarkd
while pgrep bitmarkd >/dev/null
do
    printf "stopping bitmarkd...\n"
    pkill -9 bitmarkd

    # wait 3 seconds to check
    printf "checking...\n"
    sleep 3
done
printf "all bitmarkd are stopped\n"

# compile bitmarkd
package="github.com/bitmark-inc/bitmarkd"
package_dir="${GOPATH}/src/${package}"
bin_dir="${GOPATH}/bin"

# rebuild bitmarkd only if args of b
if [ "$1" = "b" ]; then
    printf "rebuild bitmarkd\n"
    # remove existing bitmarkd
    # [ -d "${package_dir}" ] && go clean "${package}"
    [ -d "${package_dir}" ] && rm -rf "${package_dir}"

    # remove executable files if any exist
    [ -e "${GOPATH}/bin/bitmarkd" ] && rm "${GOPATH}/bin/bitmarkd"
    [ -e "${GOPATH}/bin/bitmark-cli" ] && rm "${GOPATH}/bin/bitmark-cli"
    [ -e "${GOPATH}/bin/bitmark-info" ] && rm "${GOPATH}/bin/bitmark-info"
    [ -e "${GOPATH}/bin/bitmark-dumpdb" ] && rm "${GOPATH}/bin/bitmark-dumpdb"

    # download latest bitmarkd
    printf "downloading bitmarkd...\n"
    GO111MODULE=off go get -u -v "${package}" || true # avoid error message on no Go files
    cd ${package_dir}
    printf "download packages...\n"
    go get -u -v ./...

    # compile
    printf "compile bitmarkd\n"
    go build -v ./...
    go install -v ./...
fi

if [ ! -f "${bin_dir}/bitmarkd" ]; then
    printf "bitmarkd build fail...\n"
    exit $ERROR_CODE
else
    printf "bitmarkd build success\n"
fi

# create config directory if not exist
config_dir="${HOME}/.config"
if [ ! -d "${config_dir}" ]; then
    mkdir -p "${config_dir}"
fi

# generate bitmarkd config
printf "generating bitmarkd configurations...\n"
array=("1" "2" "3" "4" "5" "6")
for number in "${array[@]}"
do
    # due to new bitcoin config, there exist some problem parsing bitcoin rpc port
    # disable following line for now
    printf "\nSkip generating new config...\n"
    # ~/bin/generate-bitmarkd-configuration -c local -n freebuilder.bitmark.lan -b "${HOME}/conf/bitcoin.conf" -l "${HOME}/conf/litecoin.conf" -u "${number}"

    # make sure every time a clean start, backup data directory
    printf "\nBacking up bitmarkd %s data directory, remove log/peer data...\n" "${number}"
    dir="${config_dir}/bitmarkd${number}"
    if [ -d "${dir}/data" ]; then
        # remove backup directory if exist
        [ -d "${dir}/data-backup" ] && rm -rf "${dir}/data-backup"

        [ -d "${dir}/data" ] && mv "${dir}/data" "${dir}/data-backup"
        # [ -d "${dir}/data" ] && rm -rf "${dir}/data"
    fi

    # remove existing log files
    [ -d "${dir}/log" ] && find "${dir}/log" -name "bitmarkd.log\.[0-9]*" -delete

    # remove peer data
    [ -e "${dir}/peers-local.json" ] && rm "${dir}/peers-local.json"

    # remove reservoir cache file
    [ -e "${dir}/reservoir-local.cache" ] && rm "${dir}/reservoir-local.cache"
done
exit $SUCCESS_CODE
