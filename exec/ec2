#!/usr/bin/env node

const Aws = require('aws-sdk');
const chalk = require('chalk');
const spawn = require('child_process').spawn;

const ec2 = new Aws.EC2({ region: 'ap-northeast-1' });

// regular expressions
const whiteLists = [
  /.*j_spark_node.*/,
  /.*j_deep_spark.*/,
  /^Kevin.*/,
  /^Jack.*/
];

// map state string into id for query
const MAPPING = {
  pending: '0',
  running: '16',
  shutdown: '32',
  terminated: '48',
  stopping: '64',
  stopped: '80'
};

// show help information
if (process.argv.includes('-h')) {
  console.log('Usage:');
  console.log(`empty parameters will show currently running instances`);
  console.log(`${chalk.cyan('-h')} to show help`);
  console.log(
    `${chalk.cyan('stop')} to stop running instances not in whitelist`
  );
  console.log(
    `${chalk.cyan('-q')} with following keyword for search criteria:`
  );
  console.log(`\t${chalk.green('pending')} to show pending instances`);
  console.log(`\t${chalk.green('running')} to show running instances`);
  console.log(`\t${chalk.green('shutdown')} to show shutdown instances`);
  console.log(`\t${chalk.green('terminated')} to show terminated instances`);
  console.log(`\t${chalk.green('stopping')} to show stopping instances`);
  console.log(`\t${chalk.green('stopped')} to show stopped instances`);
  process.exit();
}

// custom query with option -q
const enableCustomQuery = process.argv.includes('-q');

// generate query of state id
const stateCriteria = () => {
  let params = ['16']; // default serach running instances
  if (enableCustomQuery) {
    params = process.argv
      .filter(param => Object.keys(MAPPING).includes(param))
      .map(param => MAPPING[param]);
  }
  return params;
};

// params for instances searching
const searchParams = {
  Filters: [
    {
      Name: 'instance-state-code',
      Values: stateCriteria()
    }
  ]
};

ec2.describeInstances(searchParams, (err, data) => {
  if (err) {
    console.log(err, err.stack);
  } else {
    const runningInstances = data.Reservations
      .reduce((arr, insts) => {
        return arr.concat(insts.Instances);
      }, [])
      .map(i => {
        return {
          name: i.Tags.filter(obj => obj.Key === 'Name')[0].Value,
          instId: i.InstanceId
        };
      })
      .map(i => {
        i.keep = whiteLists.reduce((keepItem, reg) => {
          return keepItem || reg.test(i.name);
        }, false);
        return i;
      });

    // print current status
    console.log(chalk.green('instances:'));
    console.log(runningInstances.map(i => i.name));
    console.log(chalk.cyan('whiteLists:'));
    console.log(whiteLists);

    // without additional command, list all ec2 running instances
    if (enableCustomQuery || process.argv.length < 3) {
      return;
    }

    const enableStopInstances = process.argv.includes('stop');
    const instancesToStop = runningInstances
      .filter(i => !i.keep)
      .map(i => i.instId || null);

    if (enableStopInstances && instancesToStop.filter(i => i).length) {
      ec2.stopInstances(
        {
          InstanceIds: instancesToStop
        },
        (err, data) => {
          if (err) {
            console.log(err, err.stack);
          } else {
            console.log(chalk.red('stopping instances: '));
            console.log(instancesToStop);
          }
        }
      );
    } else {
      console.log(chalk.red('No instances to stop'));
    }
  }
});
