#!/usr/bin/env node

const Aws = require('aws-sdk');
const chalk = require('chalk');

const redshift = new Aws.Redshift({ region: 'ap-northeast-1' });

const clusterLists = ['aaron-redshift'];

const generateSnapshotName = clusterName => clusterName + '-snapshot';
const generateLog = obj => console.log;

redshift.describeClusters({}, (err, data) => {
  if (err) {
    console.log(err, err.stack);
  } else {
    const clusters = data.Clusters.map(c => ({
      name: c.ClusterIdentifier,
      status: c.ClusterStatus
    }));
    const illegalClusters = clusters.filter(
      c => clusterLists.indexOf(c.name) === -1
    );

    // print illegal clusters
    if (illegalClusters.length) {
      const text =
        'Illegal cluster names: ' + illegalClusters.map(c => c.name).join(' ,');
      console.log(text);
    }

    if (process.argv.length < 3) {
      // print existing redshift clusters
      console.log('existing clusters: ');
      clusters.forEach(c =>
        console.log('\tname: ', chalk.green(c.name), ', status: ', c.status)
      );
    } else {
      const action = process.argv[2];
      if (action === 'start') {
        // start redshift from snapshot
        console.log('it may take 10 minutes to start redshift cluster...');
        clusterLists.forEach(c => {
          redshift.restoreFromClusterSnapshot(
            {
              ClusterIdentifier: c,
              SnapshotIdentifier: generateSnapshotName(c)
            },
            (err, data) => {
              if (err && err.code !== 'ClusterAlreadyExist') {
                console.log(err, err.stack);
              } else {
                console.log('starting cluster ', c);
              }
            }
          );
        });
      } else if (action === 'stop') {
        // delete previous snpshot and store snaptshot from cluster
        console.log(
          'it may take 5 - 10 minutest to create snapshot and \
                     delete redshift cluster...'
        );
        clusters.filter(c => c.status === 'available').forEach(c => {
          redshift.deleteClusterSnapshot(
            {
              SnapshotIdentifier: generateSnapshotName(c.name)
            },
            (err, data) => {
              if (err && err.code !== 'ClusterSnapshotNotFound') {
                console.log(err, err.stack);
              } else {
                // when no error or snapshot not found, continue to delete redshift cluster
                redshift.deleteCluster(
                  {
                    ClusterIdentifier: c.name,
                    FinalClusterSnapshotIdentifier: generateSnapshotName(
                      c.name
                    ),
                    SkipFinalClusterSnapshot: false
                  },
                  (err, data) => {
                    if (err) {
                      console.log(err, err.stack);
                    } else {
                      console.log('delete cluster', chalk.red(c.name));
                    }
                  }
                );
              }
            }
          );
        });
      }
    }
  }
});
